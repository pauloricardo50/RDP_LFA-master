
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftDIVIDEINTQUOTIENTleftMULTIPLYDIVIDEleftEXPONENTleftLPARRPARleftLCHAVESRCHAVESCOMMA DEF DIVIDE DIVIDEINT ENDLINE EQUALS EXPONENT LCHAVES LPAR MINUS MULTIPLY NAME NUMBER PLUS QUOTIENT RCHAVES RPAR\n    contexto    : deffuncao\n                | funcao\n                | expression\n    \n    funcao  : NAME LPAR values RPAR\n    \n    values  : NAME COMMA values\n            | NUMBER COMMA values\n    \n    values  : NUMBER\n            | NAME\n    \n    deffuncao   : DEF NAME LPAR args RPAR bloco\n    \n    args    : NAME COMMA args\n    \n    args :   NAME\n    \n    expression  : term\n                | var_assign\n                | empty\n    \n    bloco   : LCHAVES expression RCHAVES\n    \n    var_assign  : NAME EQUALS term\n    \n    term    : term EXPONENT term\n            | term MULTIPLY term\n            | term DIVIDE term\n            | term DIVIDEINT term\n            | term QUOTIENT term\n            | term MINUS term\n            | term PLUS term\n    \n    term    : factor\n    \n    factor  : nterm\n            | NUMBER\n            | positive\n            | negative\n    \n    negative    : MINUS term\n    \n    positive    : PLUS term\n    \n    nterm : LPAR term RPAR\n    \n    term    : NAME\n    \n    empty   :\n    '
    
_lr_action_items = {'DEF':([0,],[5,]),'NAME':([0,5,7,11,12,19,20,23,24,25,26,27,28,29,32,47,49,50,56,],[6,18,22,22,22,33,22,22,22,22,22,22,22,22,45,33,33,45,58,]),'$end':([0,1,2,3,4,6,8,9,10,13,14,15,16,17,22,30,31,36,37,38,39,40,41,42,43,44,48,55,59,],[-33,0,-1,-2,-3,-32,-12,-13,-14,-24,-25,-26,-27,-28,-32,-29,-30,-16,-31,-17,-18,-19,-20,-21,-22,-23,-4,-9,-15,]),'NUMBER':([0,7,11,12,19,20,23,24,25,26,27,28,29,47,49,56,],[15,15,15,15,35,15,15,15,15,15,15,15,15,35,35,15,]),'LPAR':([0,6,7,11,12,18,20,23,24,25,26,27,28,29,56,],[7,19,7,7,7,32,7,7,7,7,7,7,7,7,7,]),'PLUS':([0,6,7,8,11,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,36,37,38,39,40,41,42,43,44,56,58,],[12,-32,12,29,12,12,-24,-25,-26,-27,-28,12,29,-32,12,12,12,12,12,12,12,-29,-30,29,-31,-17,-18,-19,-20,-21,-22,-23,12,-32,]),'MINUS':([0,6,7,8,11,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,36,37,38,39,40,41,42,43,44,56,58,],[11,-32,11,28,11,11,-24,-25,-26,-27,-28,11,28,-32,11,11,11,11,11,11,11,-29,-30,28,-31,-17,-18,-19,-20,-21,-22,-23,11,-32,]),'EXPONENT':([6,8,13,14,15,16,17,21,22,30,31,36,37,38,39,40,41,42,43,44,58,],[-32,23,-24,-25,-26,-27,-28,23,-32,23,23,23,-31,-17,23,23,23,23,23,23,-32,]),'MULTIPLY':([6,8,13,14,15,16,17,21,22,30,31,36,37,38,39,40,41,42,43,44,58,],[-32,24,-24,-25,-26,-27,-28,24,-32,24,24,24,-31,-17,-18,-19,24,24,24,24,-32,]),'DIVIDE':([6,8,13,14,15,16,17,21,22,30,31,36,37,38,39,40,41,42,43,44,58,],[-32,25,-24,-25,-26,-27,-28,25,-32,25,25,25,-31,-17,-18,-19,25,25,25,25,-32,]),'DIVIDEINT':([6,8,13,14,15,16,17,21,22,30,31,36,37,38,39,40,41,42,43,44,58,],[-32,26,-24,-25,-26,-27,-28,26,-32,26,26,26,-31,-17,-18,-19,-20,-21,26,26,-32,]),'QUOTIENT':([6,8,13,14,15,16,17,21,22,30,31,36,37,38,39,40,41,42,43,44,58,],[-32,27,-24,-25,-26,-27,-28,27,-32,27,27,27,-31,-17,-18,-19,-20,-21,27,27,-32,]),'EQUALS':([6,58,],[20,20,]),'RCHAVES':([8,9,10,13,14,15,16,17,22,30,31,36,37,38,39,40,41,42,43,44,56,57,58,],[-12,-13,-14,-24,-25,-26,-27,-28,-32,-29,-30,-16,-31,-17,-18,-19,-20,-21,-22,-23,-33,59,-32,]),'RPAR':([13,14,15,16,17,21,22,30,31,33,34,35,37,38,39,40,41,42,43,44,45,46,52,53,54,],[-24,-25,-26,-27,-28,37,-32,-29,-30,-8,48,-7,-31,-17,-18,-19,-20,-21,-22,-23,-11,51,-5,-6,-10,]),'COMMA':([33,35,45,],[47,49,50,]),'LCHAVES':([51,],[56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'contexto':([0,],[1,]),'deffuncao':([0,],[2,]),'funcao':([0,],[3,]),'expression':([0,56,],[4,57,]),'term':([0,7,11,12,20,23,24,25,26,27,28,29,56,],[8,21,30,31,36,38,39,40,41,42,43,44,8,]),'var_assign':([0,56,],[9,9,]),'empty':([0,56,],[10,10,]),'factor':([0,7,11,12,20,23,24,25,26,27,28,29,56,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'nterm':([0,7,11,12,20,23,24,25,26,27,28,29,56,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'positive':([0,7,11,12,20,23,24,25,26,27,28,29,56,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'negative':([0,7,11,12,20,23,24,25,26,27,28,29,56,],[17,17,17,17,17,17,17,17,17,17,17,17,17,]),'values':([19,47,49,],[34,52,53,]),'args':([32,50,],[46,54,]),'bloco':([51,],[55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> contexto","S'",1,None,None,None),
  ('contexto -> deffuncao','contexto',1,'p_contexto','parser.py',96),
  ('contexto -> funcao','contexto',1,'p_contexto','parser.py',97),
  ('contexto -> expression','contexto',1,'p_contexto','parser.py',98),
  ('funcao -> NAME LPAR values RPAR','funcao',4,'p_funcao','parser.py',105),
  ('values -> NAME COMMA values','values',3,'p_values_value','parser.py',113),
  ('values -> NUMBER COMMA values','values',3,'p_values_value','parser.py',114),
  ('values -> NUMBER','values',1,'p_values','parser.py',121),
  ('values -> NAME','values',1,'p_values','parser.py',122),
  ('deffuncao -> DEF NAME LPAR args RPAR bloco','deffuncao',6,'p_deffuncao','parser.py',132),
  ('args -> NAME COMMA args','args',3,'p_args','parser.py',139),
  ('args -> NAME','args',1,'p_args_arg','parser.py',145),
  ('expression -> term','expression',1,'p_expression','parser.py',152),
  ('expression -> var_assign','expression',1,'p_expression','parser.py',153),
  ('expression -> empty','expression',1,'p_expression','parser.py',154),
  ('bloco -> LCHAVES expression RCHAVES','bloco',3,'p_bloco','parser.py',161),
  ('var_assign -> NAME EQUALS term','var_assign',3,'p_var_assign','parser.py',175),
  ('term -> term EXPONENT term','term',3,'p_term','parser.py',182),
  ('term -> term MULTIPLY term','term',3,'p_term','parser.py',183),
  ('term -> term DIVIDE term','term',3,'p_term','parser.py',184),
  ('term -> term DIVIDEINT term','term',3,'p_term','parser.py',185),
  ('term -> term QUOTIENT term','term',3,'p_term','parser.py',186),
  ('term -> term MINUS term','term',3,'p_term','parser.py',187),
  ('term -> term PLUS term','term',3,'p_term','parser.py',188),
  ('term -> factor','term',1,'p_term_factor','parser.py',195),
  ('factor -> nterm','factor',1,'p_factor','parser.py',202),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',203),
  ('factor -> positive','factor',1,'p_factor','parser.py',204),
  ('factor -> negative','factor',1,'p_factor','parser.py',205),
  ('negative -> MINUS term','negative',2,'p_negative','parser.py',212),
  ('positive -> PLUS term','positive',2,'p_positive','parser.py',218),
  ('nterm -> LPAR term RPAR','nterm',3,'p_nterm','parser.py',225),
  ('term -> NAME','term',1,'p_term_var','parser.py',232),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',241),
]
